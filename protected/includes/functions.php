<?php

/**
 * Транслитерация. Just Works.
 */

function str_translate($str)
{
	$tr = array(
		"А"=>"a",
		"Б"=>"b",
		"В"=>"v",
		"Г"=>"g",
		"Д"=>"d",
		"Е"=>"e",
		"Ё"=>"e",
		"Ж"=>"j",
		"З"=>"z",
		"И"=>"i",
		"Й"=>"y",
		"К"=>"k",
		"Л"=>"l",
		"М"=>"m",
		"Н"=>"n",
		"О"=>"o",
		"П"=>"p",
		"Р"=>"r",
		"С"=>"s",
		"Т"=>"t",
		"У"=>"u",
		"Ф"=>"f",
		"Х"=>"h",
		"Ц"=>"ts",
		"Ч"=>"ch",
		"Ш"=>"sh",
		"Щ"=>"sch",
		"Ъ"=>"",
		"Ы"=>"i",
		"Ь"=>"j",
		"Э"=>"e",
		"Ю"=>"yu",
		"Я"=>"ya",
		"а"=>"a",
		"б"=>"b",
		"в"=>"v",
		"г"=>"g",
		"д"=>"d",
		"е"=>"e",
		"ё"=>"e",
		"ж"=>"j",
		"з"=>"z",
		"и"=>"i",
		"й"=>"y",
		"к"=>"k",
		"л"=>"l",
		"м"=>"m",
		"н"=>"n",
		"о"=>"o",
		"п"=>"p",
		"р"=>"r",
		"с"=>"s",
		"т"=>"t",
		"у"=>"u",
		"ф"=>"f",
		"х"=>"h",
		"ц"=>"ts",
		"ч"=>"ch",
		"ш"=>"sh",
		"щ"=>"sch",
		"ъ"=>"y",
		"ы"=>"i",
		"ь"=>"j",
		"э"=>"e",
		"ю"=>"yu",
		"я"=>"ya",
		" "=> "_",
		"."=> "",
		"/"=> "_",
		","=>"_",
        //"-"=>"_",
		"("=>"",
		")"=>"",
		"["=>"",
		"]"=>"",
		"="=>"_",
		"+"=>"_",
		"*"=>"",
		"?"=>"",
		"\""=>"",
		"'"=>"",
		"&"=>"",
		"%"=>"",
		"#"=>"",
		"@"=>"",
		"!"=>"",
		";"=>"",
		"№"=>"",
		"^"=>"",
		":"=>"",
		"~"=>"",
		"\\"=>"",
		"`"=>""
	);

	return strtr($str,$tr);
}

function str_seo_url($urlstr)
{
	$urlstr = str_replace(' ', '-', strtolower($urlstr));

	$urlstr = str_translate($urlstr);

	return $urlstr;
}
/**
 * @param $number
 * @return string
 * Перевод числа в слово
 */
function number2string($number)
{
  // обозначаем словарь в виде статической переменной функции, чтобы
  // при повторном использовании функции его не определять заново
  static $dic = array(

    // словарь необходимых чисел
    array(
      -2	=> 'две',
      -1	=> 'одна',
      1	=> 'один',
      2	=> 'два',
      3	=> 'три',
      4	=> 'четыре',
      5	=> 'пять',
      6	=> 'шесть',
      7	=> 'семь',
      8	=> 'восемь',
      9	=> 'девять',
      10	=> 'десять',
      11	=> 'одиннадцать',
      12	=> 'двенадцать',
      13	=> 'тринадцать',
      14	=> 'четырнадцать' ,
      15	=> 'пятнадцать',
      16	=> 'шестнадцать',
      17	=> 'семнадцать',
      18	=> 'восемнадцать',
      19	=> 'девятнадцать',
      20	=> 'двадцать',
      30	=> 'тридцать',
      40	=> 'сорок',
      50	=> 'пятьдесят',
      60	=> 'шестьдесят',
      70	=> 'семьдесят',
      80	=> 'восемьдесят',
      90	=> 'девяносто',
      100	=> 'сто',
      200	=> 'двести',
      300	=> 'триста',
      400	=> 'четыреста',
      500	=> 'пятьсот',
      600	=> 'шестьсот',
      700	=> 'семьсот',
      800	=> 'восемьсот',
      900	=> 'девятьсот'
    ),

    // словарь порядков со склонениями для плюрализации
    array(
      array('рубль', 'рубля', 'рублей'),
      array('тысяча', 'тысячи', 'тысяч'),
      array('миллион', 'миллиона', 'миллионов'),
      array('миллиард', 'миллиарда', 'миллиардов'),
      array('триллион', 'триллиона', 'триллионов'),
      array('квадриллион', 'квадриллиона', 'квадриллионов'),
      // квинтиллион, секстиллион и т.д.
    ),

    // карта плюрализации
    array(
      2, 0, 1, 1, 1, 2
    )
  );

  // обозначаем переменную в которую будем писать сгенерированный текст
  $string = array();

  // дополняем число нулями слева до количества цифр кратного трем,
  // например 1234, преобразуется в 001234
  $number = str_pad($number, ceil(strlen($number)/3)*3, 0, STR_PAD_LEFT);

  // разбиваем число на части из 3 цифр (порядки) и инвертируем порядок частей,
  // т.к. мы не знаем максимальный порядок числа и будем бежать снизу
  // единицы, тысячи, миллионы и т.д.
  $parts = array_reverse(str_split($number,3));

  // бежим по каждой части
  foreach($parts as $i=>$part) {

    // если часть не равна нулю, нам надо преобразовать ее в текст
    if($part>0) {

      // обозначаем переменную в которую будем писать составные числа для текущей части
      $digits = array();

      // если число треххзначное, запоминаем количество сотен
      if($part>99) {
        $digits[] = floor($part/100)*100;
      }

      // если последние 2 цифры не равны нулю, продолжаем искать составные числа
      // (данный блок прокомментирую при необходимости)
      if($mod1=$part%100) {
        $mod2 = $part%10;
        $flag = $i==1 && $mod1!=11 && $mod1!=12 && $mod2<3 ? -1 : 1;
        if($mod1<20 || !$mod2) {
          $digits[] = $flag*$mod1;
        } else {
          $digits[] = floor($mod1/10)*10;
          $digits[] = $flag*$mod2;
        }
      }

      // берем последнее составное число, для плюрализации
      $last = abs(end($digits));

      // преобразуем все составные числа в слова
      foreach($digits as $j=>$digit) {
        $digits[$j] = $dic[0][$digit];
      }

      // добавляем обозначение порядка или валюту
      $digits[] = $dic[1][$i][(($last%=100)>4 && $last<20) ? 2 : $dic[2][min($last%10,5)]];

      // объединяем составные числа в единый текст и добавляем в переменную, которую вернет функция
      array_unshift($string, join(' ', $digits));
    }
  }

  // преобразуем переменную в текст и возвращаем из функции, ура!
  return join(' ', $string);
}
/**
 * @param $data
 * @param bool $printR
 * Вывод инфы для дебага
 */
function display($data, $printR = true)
{
  echo '<pre>';
  if($printR)
  {
    print_r($data);
  }
  else
  {
    var_dump($data);
  }
  echo '</pre>';
}
/**
 * @param $eco
 * @return mixed|string
 */
function encoderSys($eco)
{
  $eco = urldecode($eco);
  $eco = json_fix_cyr($eco);
  return $eco;
}
/**
 * @param $json_str
 * @return mixed
 */
function json_fix_cyr($json_str)
{
  $cyr_chars = array (
    '\u0430' => 'а', '\u0410' => 'А',
    '\u0431' => 'б', '\u0411' => 'Б',
    '\u0432' => 'в', '\u0412' => 'В',
    '\u0433' => 'г', '\u0413' => 'Г',
    '\u0434' => 'д', '\u0414' => 'Д',
    '\u0435' => 'е', '\u0415' => 'Е',
    '\u0451' => 'ё', '\u0401' => 'Ё',
    '\u0436' => 'ж', '\u0416' => 'Ж',
    '\u0437' => 'з', '\u0417' => 'З',
    '\u0438' => 'и', '\u0418' => 'И',
    '\u0439' => 'й', '\u0419' => 'Й',
    '\u043a' => 'к', '\u041a' => 'К',
    '\u043b' => 'л', '\u041b' => 'Л',
    '\u043c' => 'м', '\u041c' => 'М',
    '\u043d' => 'н', '\u041d' => 'Н',
    '\u043e' => 'о', '\u041e' => 'О',
    '\u043f' => 'п', '\u041f' => 'П',
    '\u0440' => 'р', '\u0420' => 'Р',
    '\u0441' => 'с', '\u0421' => 'С',
    '\u0442' => 'т', '\u0422' => 'Т',
    '\u0443' => 'у', '\u0423' => 'У',
    '\u0444' => 'ф', '\u0424' => 'Ф',
    '\u0445' => 'х', '\u0425' => 'Х',
    '\u0446' => 'ц', '\u0426' => 'Ц',
    '\u0447' => 'ч', '\u0427' => 'Ч',
    '\u0448' => 'ш', '\u0428' => 'Ш',
    '\u0449' => 'щ', '\u0429' => 'Щ',
    '\u044a' => 'ъ', '\u042a' => 'Ъ',
    '\u044b' => 'ы', '\u042b' => 'Ы',
    '\u044c' => 'ь', '\u042c' => 'Ь',
    '\u044d' => 'э', '\u042d' => 'Э',
    '\u044e' => 'ю', '\u042e' => 'Ю',
    '\u044f' => 'я', '\u042f' => 'Я',

    '\r' => '',
    '\n' => '<br />',
    '\t' => ''
  );

  foreach ($cyr_chars as $cyr_char_key => $cyr_char)
  {
    $json_str = str_replace($cyr_char_key, $cyr_char, $json_str);
  }
  return $json_str;
}